import React, { useState, useCallback } from 'react';
import { motion } from 'framer-motion';
import { Play, Pause, SkipBack, SkipForward, Download, Share2, Search, Edit2, Send, Brain, MessageSquare } from 'lucide-react';
import { useTranscriptionContext } from '../context/TranscriptionContext';

interface TranscriptSegment {
  timestamp: string;
  text: string;
}

interface ChatMessage {
  id: string;
  text: string;
  sender: 'user' | 'ai';
  timestamp: Date;
}

const TranscriptionView = () => {
  const { recentTranscriptions } = useTranscriptionContext();
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [searchQuery, setSearchQuery] = useState('');
  const [isEditing, setIsEditing] = useState(false);
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [activeTab, setActiveTab] = useState<'transcript' | 'chat'>('transcript');
  const [isProcessing, setIsProcessing] = useState(false);

  const [segments, setSegments] = useState<TranscriptSegment[]>([
    {
      timestamp: '00:00',
      text: 'This is the first segment of the transcribed text.',
    },
    {
      timestamp: '00:15',
      text: 'Here is another segment of the transcribed speech.',
    }
  ]);

  const handleSegmentEdit = (index: number, newText: string) => {
    const updatedSegments = [...segments];
    updatedSegments[index] = { ...updatedSegments[index], text: newText };
    setSegments(updatedSegments);
  };

  const generateAIResponse = useCallback((userMessage: string): string => {
    // Combine all transcript segments into a single text for analysis
    const fullTranscript = segments.map(seg => seg.text).join(' ');
    
    // Simple keyword matching for demonstration
    const keywords = userMessage.toLowerCase().split(' ');
    
    if (keywords.includes('summary')) {
      return `Here's a summary of the transcript: The recording discusses ${fullTranscript.slice(0, 100)}...`;
    }
    
    if (keywords.includes('length') || keywords.includes('duration')) {
      return `The transcript contains ${segments.length} segments with a total of ${fullTranscript.split(' ').length} words.`;
    }
    
    if (keywords.includes('find') || keywords.includes('search')) {
      const searchTerm = keywords[keywords.indexOf('find') + 1] || keywords[keywords.indexOf('search') + 1];
      const matches = fullTranscript.toLowerCase().includes(searchTerm) 
        ? `I found "${searchTerm}" in the transcript.` 
        : `I couldn't find "${searchTerm}" in the transcript.`;
      return matches;
    }

    if (keywords.includes('analyze') || keywords.includes('analysis')) {
      return `Based on my analysis, this transcript appears to be about ${
        fullTranscript.split(' ').slice(0, 5).join(' ')
      }... The key themes include communication and information sharing.`;
    }

    return `I've analyzed the transcript and found that your question relates to ${
      userMessage.split(' ').slice(0, 3).join(' ')
    }... Would you like me to provide more specific information about certain parts of the transcript?`;
  }, [segments]);

  const handleSendMessage = useCallback(async () => {
    if (!newMessage.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      text: newMessage,
      sender: 'user',
      timestamp: new Date(),
    };

    setChatMessages(prev => [...prev, userMessage]);
    setNewMessage('');
    setIsProcessing(true);

    // Simulate AI processing time
    setTimeout(() => {
      const aiResponse = generateAIResponse(userMessage.text);
      
      const aiMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        text: aiResponse,
        sender: 'ai',
        timestamp: new Date(),
      };

      setChatMessages(prev => [...prev, aiMessage]);
      setIsProcessing(false);
    }, 1000);
  }, [newMessage, generateAIResponse]);

  const filteredSegments = segments.filter(segment =>
    segment.text.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="max-w-7xl mx-auto py-8">
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white rounded-2xl shadow-lg border border-gray-100/50 overflow-hidden"
      >
        <div className="bg-gradient-to-r from-gray-50 to-blue-50 p-6 border-b border-gray-100">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button className="text-gray-600 hover:text-blue-600 transition-colors">
                <SkipBack size={24} />
              </button>
              <motion.button 
                whileTap={{ scale: 0.95 }}
                className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-600 to-indigo-600 text-white flex items-center justify-center hover:from-blue-700 hover:to-indigo-700 transition-all shadow-md"
                onClick={() => setIsPlaying(!isPlaying)}
              >
                {isPlaying ? <Pause size={24} /> : <Play size={24} />}
              </motion.button>
              <button className="text-gray-600 hover:text-blue-600 transition-colors">
                <SkipForward size={24} />
              </button>
            </div>
            
            <div className="flex-1 mx-8">
              <div className="relative">
                <div className="h-2 bg-gray-200 rounded-full">
                  <motion.div 
                    className="h-full bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full"
                    style={{ width: `${currentTime}%` }}
                  />
                </div>
                <input
                  type="range"
                  min="0"
                  max="100"
                  value={currentTime}
                  onChange={(e) => setCurrentTime(Number(e.target.value))}
                  className="absolute inset-0 w-full opacity-0 cursor-pointer"
                />
              </div>
            </div>

            <div className="flex items-center space-x-3">
              <motion.button 
                whileHover={{ scale: 1.05 }}
                className="flex items-center space-x-2 px-4 py-2 bg-white rounded-lg shadow-sm hover:shadow transition-all border border-gray-200"
              >
                <Download size={18} />
                <span>Export</span>
              </motion.button>
              <motion.button 
                whileHover={{ scale: 1.05 }}
                className="flex items-center space-x-2 px-4 py-2 bg-white rounded-lg shadow-sm hover:shadow transition-all border border-gray-200"
              >
                <Share2 size={18} />
                <span>Share</span>
              </motion.button>
            </div>
          </div>
        </div>

        <div className="flex border-b border-gray-200">
          <button
            onClick={() => setActiveTab('transcript')}
            className={`flex items-center space-x-2 px-6 py-3 font-medium transition-colors ${
              activeTab === 'transcript' 
                ? 'text-blue-600 border-b-2 border-blue-600' 
                : 'text-gray-600 hover:text-blue-600'
            }`}
          >
            <Brain size={20} />
            <span>Analysis</span>
          </button>
          <button
            onClick={() => setActiveTab('chat')}
            className={`flex items-center space-x-2 px-6 py-3 font-medium transition-colors ${
              activeTab === 'chat' 
                ? 'text-blue-600 border-b-2 border-blue-600' 
                : 'text-gray-600 hover:text-blue-600'
            }`}
          >
            <MessageSquare size={20} />
            <span>Chat with Transcript</span>
          </button>
        </div>

        <div className="p-6">
          {activeTab === 'transcript' ? (
            <div className="space-y-6">
              <div className="flex items-center justify-between mb-6">
                <div className="flex-1 max-w-md">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                    <input
                      type="text"
                      placeholder="Search transcript..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="w-full pl-10 pr-4 py-2 bg-gray-50 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white transition-all"
                    />
                  </div>
                </div>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  onClick={() => setIsEditing(!isEditing)}
                  className="flex items-center space-x-2 px-4 py-2 bg-white rounded-lg shadow-sm hover:shadow transition-all border border-gray-200"
                >
                  <Edit2 size={18} />
                  <span>{isEditing ? 'Save' : 'Edit'}</span>
                </motion.button>
              </div>

              <div className="space-y-4">
                {filteredSegments.map((segment, index) => (
                  <motion.div 
                    key={index}
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: index * 0.1 }}
                    className="flex items-start space-x-4 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg p-4"
                  >
                    <span className="text-sm font-medium text-blue-600">{segment.timestamp}</span>
                    {isEditing ? (
                      <textarea
                        value={segment.text}
                        onChange={(e) => handleSegmentEdit(index, e.target.value)}
                        className="flex-1 p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none"
                        rows={2}
                      />
                    ) : (
                      <p className="flex-1 text-gray-800">{segment.text}</p>
                    )}
                  </motion.div>
                ))}
              </div>
            </div>
          ) : (
            <div className="h-[600px] flex flex-col">
              <div className="flex-1 overflow-y-auto mb-4 space-y-4 p-4">
                {chatMessages.map((message) => (
                  <motion.div
                    key={message.id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div 
                      className={`max-w-[70%] rounded-2xl p-4 ${
                        message.sender === 'user' 
                          ? 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white' 
                          : 'bg-gradient-to-br from-gray-50 to-blue-50 text-gray-800'
                      }`}
                    >
                      <p className="leading-relaxed">{message.text}</p>
                      <p className="text-xs mt-2 opacity-70">
                        {message.timestamp.toLocaleTimeString()}
                      </p>
                    </div>
                  </motion.div>
                ))}
                {isProcessing && (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="flex justify-start"
                  >
                    <div className="bg-gradient-to-br from-gray-50 to-blue-50 rounded-2xl p-4">
                      <div className="flex space-x-2">
                        <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                        <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{ animationDelay: '200ms' }} />
                        <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{ animationDelay: '400ms' }} />
                      </div>
                    </div>
                  </motion.div>
                )}
              </div>
              
              <div className="border-t pt-4 px-4">
                <div className="flex items-center space-x-2">
                  <input
                    type="text"
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    placeholder="Ask about the transcription... (try 'summary', 'analyze', or 'find [word]')"
                    className="flex-1 px-4 py-2 bg-gray-50 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white transition-all"
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                  />
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={handleSendMessage}
                    disabled={isProcessing}
                    className={`p-2 ${
                      isProcessing 
                        ? 'bg-gray-400 cursor-not-allowed' 
                        : 'bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700'
                    } text-white rounded-lg transition-colors`}
                  >
                    <Send size={20} />
                  </motion.button>
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  Try asking for a summary, analysis, or to find specific words in the transcript
                </p>
              </div>
            </div>
          )}
        </div>
      </motion.div>
    </div>
  );
};

export default TranscriptionView;
